

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal THIS, FOREACH, PLUS, MINUS, MUL, DIV, PERCENT, EQUALS_EQUALS, NOT_EQUALS;
terminal GT, GTE, LT, LTE, AND, OR, EQUALS, INCREMENT, DECREMENT, SEMICOLON, COLON, COMMA, DOT;
terminal LEFT_ROUND_PARENTHESES, RIGHT_ROUND_PARENTHESES, LEFT_SQUARE_PARENTHESES, RIGHT_SQUARE_PARENTHESES;
terminal LEFT_WIGGLY_PARENTHESES, RIGHT_WIGGLY_PARENTHESES, ARROW;

terminal Integer NUMCONST;
terminal String IDENT;
terminal Boolean BOOLCONST;
terminal Character CHARCONST;

nonterminal Program, ConstDeclList, MethodDeclList, ConstDecl, FirstConst, OtherConstList;
nonterminal VarDecl, FirstVarDecl, OtherVarDeclList, ClassDecl, Extension, VarDeclList, ConstructorMethodLists, ConstructorDeclList;
nonterminal ConstructorDecl, FormParsOptional, StatementList, MethodDecl, ReturnType, FormPars, OptionalSquares, TypeIdentList, Type;
nonterminal Statement, Unmatched, Matched, OptionalExpr, OptionalNumConst;
nonterminal DesignatorStatement, DsgStmtEnd, OptionalActPars, OptionalDesignator, OptionalDesignatorList, ActPars, ExprList;
nonterminal ConditionIF, ConditionWHILE, CondTermOrList, CondTerm, CondFactAndList, CondFact, OptionalRelopExpr, Expr, OptMinus, AddopTermList;
nonterminal Term, MulopFactorList, Factor, OptOptActPars, ExprOrActPars, Designator, IdentExprList, Label, Assignop, Relop, Addop, Mulop, DesignatorFE, ElseElse;
nonterminal FirstConstructorDecl, Lists, MethodDecl2, MethodDeclList2, ConstTail, IdentSquares;
nonterminal ClassVarDecl, ClassVarDeclList, FirstClassVarDecl, OtherClassVarDeclList;

precedence left ELSE;

/* PROGRAM */

Program ::= (ProgramX) PROGRAM IDENT ConstDeclList LEFT_WIGGLY_PARENTHESES MethodDeclList RIGHT_WIGGLY_PARENTHESES;

ConstDeclList ::= (ConstDeclListConst) ConstDeclList ConstDecl |
				  (ConstDeclListVar) ConstDeclList VarDecl   |
				  (ConstDeclListClass) ConstDeclList ClassDecl |
				  (NoConstDeclList) /* epsilon */;
				  
MethodDeclList ::= (MethodDeclListX) MethodDeclList MethodDecl |
				   (NoMethodDeclList) /* epsilon */;
				   
/* CONST DECL */		   
				   
ConstDecl ::= (ConstDeclX) CONST Type IDENT EQUALS FirstConst OtherConstList SEMICOLON |
			  (ConstDeclError) error:l {: parser.report_error("Greska u deklaraciji globalnih konstanti u liniji " + lleft, null); :} SEMICOLON;

FirstConst ::= (FirstConstNum) NUMCONST |
			   (FirstConstChar) CHARCONST |
			   (FirstConstBool) BOOLCONST;
			   
OtherConstList ::= (OtherConstListX) OtherConstList COMMA ConstTail |
				   (NoOtherConstList) /* epsilon */;
				   
ConstTail ::= (ConstTailX) IDENT EQUALS FirstConst |
			  (ConstTailError) error:l {: parser.report_error("Greska u deklaraciji globalnih konstanti u liniji " + lleft, null); :};

/* VAR DECL */
				   
VarDecl ::= (VarDeclX) Type FirstVarDecl OtherVarDeclList SEMICOLON;

ClassVarDecl ::= (ClassVarDeclX) Type FirstClassVarDecl OtherClassVarDeclList SEMICOLON |
				 (ClassVarDeclError) error:l {: parser.report_error("Greska u deklaraciji polja klase u liniji " + lleft, null); :};

FirstVarDecl ::= (FirstVarDeclIdentOnly) IDENT |
				 (FirstVarDeclArrayIdent) IDENT LEFT_SQUARE_PARENTHESES RIGHT_SQUARE_PARENTHESES |
				 (FirstVarDeclError) error:l {: parser.report_error("Greska u deklaraciji globalnih varijabli u liniji " + lleft, null); :};
				 
FirstClassVarDecl ::= (FirstClassVarDeclIdentOnly) IDENT |
				 	  (FirstClassVarDeclArrayIdent) IDENT LEFT_SQUARE_PARENTHESES RIGHT_SQUARE_PARENTHESES;
				 
OtherVarDeclList ::= (OtherVarDeclListX) OtherVarDeclList COMMA FirstVarDecl |
					 (OtherVarDeclListError) error:l {: parser.report_error("Greska u deklaraciji globalnih varijabli u liniji " + lleft, null); :} |
					 (NoOtherVarDeclList) /* epsilon */;
					 
OtherClassVarDeclList ::= (OtherClassVarDeclListX) OtherVarDeclList COMMA FirstVarDecl |
					 	  (NoOtherClassVarDeclList) /* epsilon */;
					 
/* CLASS DECL */

ClassDecl ::= (ClassDecl) CLASS IDENT Extension LEFT_WIGGLY_PARENTHESES ClassVarDeclList ConstructorMethodLists RIGHT_WIGGLY_PARENTHESES;

Extension ::= (ExtensionX) EXTENDS Type |
			  (ExtensionError) error:l {: parser.report_error("Greska u proširenju natklase u liniji " + lleft, null); :}|
			  (NoExtension) /* epsilon */;
			  
ClassVarDeclList ::= (ClassVarDeclListX) ClassVarDeclList ClassVarDecl |
					 (NoClassVarDeclList) /* epsilon */;

VarDeclList ::= (VarDeclListX) VarDeclList VarDecl |
				(NoVarDeclList) /* epsilon */;
				
ConstructorMethodLists ::= (ConstructorMethodListsX) LEFT_WIGGLY_PARENTHESES Lists RIGHT_WIGGLY_PARENTHESES |
						   (NoConstructorMethodLists) /* epsilon */;

Lists ::= (Lists1) IDENT LEFT_ROUND_PARENTHESES ConstructorDeclList IDENT IDENT MethodDeclList2 |
		  (Lists5) IDENT LEFT_ROUND_PARENTHESES ConstructorDeclList VOID IDENT MethodDeclList2 |
		  (Lists6) IDENT LEFT_ROUND_PARENTHESES ConstructorDeclList |
		  (Lists2) IDENT IDENT MethodDeclList2 |
		  (Lists3) VOID IDENT MethodDeclList2 |
		  (Lists4) /* epsilon */;
		  
MethodDeclList2 ::= (MDL21) MethodDeclList2 IDENT IDENT MethodDecl2 |
				   (MDL22) MethodDeclList2 VOID IDENT MethodDecl2 |
				   (MDL23) MethodDecl2;
				   
MethodDecl2 ::= LEFT_ROUND_PARENTHESES FormParsOptional RIGHT_ROUND_PARENTHESES VarDeclList LEFT_WIGGLY_PARENTHESES StatementList RIGHT_WIGGLY_PARENTHESES;

ConstructorDeclList ::= (ConstructorDeclListX) ConstructorDeclList IDENT LEFT_ROUND_PARENTHESES FirstConstructorDecl |
						(NoConstructorDeclList) FirstConstructorDecl;
						
FirstConstructorDecl ::= FormParsOptional RIGHT_ROUND_PARENTHESES VarDeclList LEFT_WIGGLY_PARENTHESES StatementList RIGHT_WIGGLY_PARENTHESES;

/* CONSTRUCTOR DECL */

ConstructorDecl ::= (ConstructorDecl) IDENT LEFT_ROUND_PARENTHESES FormParsOptional RIGHT_ROUND_PARENTHESES VarDeclList LEFT_WIGGLY_PARENTHESES StatementList RIGHT_WIGGLY_PARENTHESES;

FormParsOptional ::= (FormParsOptionalX) FormPars |
					(NoFormParsOptional) /* epsilon */;
					
StatementList ::= (StatementListX) StatementList Statement |
				  (NoStatementList) /* epsilon */;
			
/* METHOD DECL */

MethodDecl ::= (MethodDecl) ReturnType IDENT LEFT_ROUND_PARENTHESES FormParsOptional RIGHT_ROUND_PARENTHESES VarDeclList LEFT_WIGGLY_PARENTHESES StatementList RIGHT_WIGGLY_PARENTHESES;

ReturnType ::= (ReturnTypeX) Type |
			   (NoReturnType) VOID;
			   
/* FORM PARS */

FormPars ::= (FormPars) IdentSquares TypeIdentList;

OptionalSquares ::= (OptionalSquaresX) LEFT_SQUARE_PARENTHESES RIGHT_SQUARE_PARENTHESES |
					(NoOptionalSquares) /* epsilon */;
					
TypeIdentList ::= (TypeIdentListX) TypeIdentList COMMA IdentSquares |
				  (NoTypeIdentList) /* epsilon */;
				  
IdentSquares ::= (IdentSquaresX) Type IDENT OptionalSquares |
				 (IdentSquaresError) error:l {: parser.report_error("Greska u deklaraciji formalnog parametra funkcije u liniji " + lleft, null); :};
				  
/* TYPE */

Type ::= (Type) IDENT;

/* STATEMENT */

Statement ::= (MatchedStmt) Matched |
			  (UnmatchedStmt) Unmatched;
			  
Unmatched ::= (UnmatchedIf) IF LEFT_ROUND_PARENTHESES ConditionIF RIGHT_ROUND_PARENTHESES Statement |
			  (UnmatchedIfElse) IF LEFT_ROUND_PARENTHESES ConditionIF RIGHT_ROUND_PARENTHESES Matched ElseElse Unmatched;

Matched ::= (DesigStmt) DesignatorStatement SEMICOLON |
			(MatchedIfElseStmt) IF LEFT_ROUND_PARENTHESES ConditionIF RIGHT_ROUND_PARENTHESES Matched ElseElse Matched |
			(WhileStmt) WHILE LEFT_ROUND_PARENTHESES ConditionWHILE RIGHT_ROUND_PARENTHESES Statement |
			(BreakStmt) BREAK SEMICOLON |
			(ContinueStmt) CONTINUE SEMICOLON |
			(ReturnStmt) RETURN OptionalExpr SEMICOLON |
			(ReadStmt) READ LEFT_ROUND_PARENTHESES Designator RIGHT_ROUND_PARENTHESES SEMICOLON |
			(PrintStmt) PRINT LEFT_ROUND_PARENTHESES Expr OptionalNumConst RIGHT_ROUND_PARENTHESES SEMICOLON |
			(ForeachStmt) DesignatorFE LEFT_ROUND_PARENTHESES IDENT ARROW Statement RIGHT_ROUND_PARENTHESES SEMICOLON |
			(BlockStmt) LEFT_WIGGLY_PARENTHESES StatementList RIGHT_WIGGLY_PARENTHESES;	
			
ElseElse ::= (ElseElse) ELSE;	  
				 
OptionalExpr ::= (OptionalExprX) Expr |
				 (NoOptionalExpr) /* epsilon */;
				 
OptionalNumConst ::= (OptionalNumConstX) COMMA NUMCONST |
					 (NoOptionalNumConst) /* epsilon */;

/* DESIGNATOR STATEMENT */

DesignatorStatement ::= (FirstTypeDesignatorStmt) Designator DsgStmtEnd |
						(SecondTypeDesignatorStmt) LEFT_SQUARE_PARENTHESES OptionalDesignator OptionalDesignatorList RIGHT_SQUARE_PARENTHESES EQUALS Designator |
						(ErrorDesignatorStmt) error:l {: parser.report_error("Greska u konstrukciji iskaza dodele u liniji " + lleft, null); :};
						
DsgStmtEnd ::= (AssignDsgStmtEnd) Assignop Expr |
			   (ActParsDsgStmtEnd) LEFT_ROUND_PARENTHESES OptionalActPars RIGHT_ROUND_PARENTHESES |
			   (IncDsgStmtEnd) INCREMENT |
			   (DecDsgStmtEnd) DECREMENT;

OptionalActPars ::= (OptionalActParsX) ActPars |
				    (NoOptionalActPars) /* epsilon */;
				    
OptionalDesignator ::= (OptionalDesignatorX) Designator |
					   (NoOptionalDesignator) /* epsilon */;
					   
OptionalDesignatorList ::= (OptionalDesignatorListX) OptionalDesignatorList COMMA OptionalDesignator |
						   (NoOptionalDesignatorList) /* epsilon */;
						   
/* ACT PARS */

ActPars ::= (ActPars) Expr ExprList;

ExprList ::= (ExprListX) ExprList COMMA Expr |
			 (NoExprList) /* epsilon */;

/* CONDITION */

ConditionIF ::= (ConditionIFX) CondTerm CondTermOrList |
				(ConditionIFError) error:l {: parser.report_error("Greska u logickom izrazu za IF grananje u liniji " + lleft, null); :};

ConditionWHILE ::= (ConditionWHILE) CondTerm CondTermOrList;

CondTermOrList ::= (CondTermOrListX) CondTermOrList OR CondTerm |
				   (NoCondTermOrList) /* epsilon */;

/* COND TERM */

CondTerm ::= (CondTerm) CondFact CondFactAndList;

CondFactAndList ::= (CondFactAndListX) CondFactAndList AND CondFact |
					(NoCondFactAndList) /* epsilon */;

/* COND FACT */

CondFact ::= (CondFact) Expr OptionalRelopExpr;

OptionalRelopExpr ::= (OptionalRelopExprX) Relop Expr |
					  (NoOptionalRelopExpr) /* epsilon */;
					  
/* EXPR */

Expr ::= (Expr) OptMinus Term AddopTermList;

OptMinus ::= (OptMinusX) MINUS |
			 (NoOptMinus) /* epsilon */;
			 
AddopTermList ::= (AddopTermListX) AddopTermList Addop Term |
				  (NoAddopTermList) /* epsilon */;
 				  
/* TERM */

Term ::= (Term) Factor MulopFactorList;

MulopFactorList ::= (MulopFactorListX) MulopFactorList Mulop Factor |
					(NoMulopFactorList) /* epsilon */;
					
/* FACTOR */

Factor ::= (FactorActPars) Designator OptOptActPars |
		   (FactorNumConst) NUMCONST |
		   (FactorCharConst) CHARCONST |
		   (FactorBoolConst) BOOLCONST |
		   (FactorExprActPars) NEW Type ExprOrActPars |
		   (FactorExpr) LEFT_ROUND_PARENTHESES Expr RIGHT_ROUND_PARENTHESES;

OptOptActPars ::= (OptOptActParsX) LEFT_ROUND_PARENTHESES OptionalActPars RIGHT_ROUND_PARENTHESES |
				  (NoOptOptActPars) /* epsilon */;

ExprOrActPars ::= (ExprOrActParsExpr) LEFT_SQUARE_PARENTHESES Expr RIGHT_SQUARE_PARENTHESES |
				  (ExprOrActParsActPars) LEFT_ROUND_PARENTHESES OptionalActPars RIGHT_ROUND_PARENTHESES;
			  
/* DESIGNATOR */

Designator ::= (Designator) IDENT IdentExprList;

DesignatorFE ::= (DesignatorFE) IDENT IdentExprList DOT FOREACH;

IdentExprList ::= (IdentExprListIdent) IdentExprList DOT IDENT |
				  (IdentExprListExpr) IdentExprList LEFT_SQUARE_PARENTHESES Expr RIGHT_SQUARE_PARENTHESES |
				  (NoIdentExprList) /* epsilon */;
				  
/* LABEL */

Label ::= (Label) IDENT;

/* ASSIGNOP */

Assignop ::= (Assignop) EQUALS;

/* RELOP */

Relop ::= (RelopEq) EQUALS_EQUALS |
		  (RelopNE) NOT_EQUALS |
		  (RelopGT) GT |
		  (RelopGTE) GTE |
		  (RelopLT) LT |
		  (RelopLTE) LTE;
		  
/* ADDOP */

Addop ::= (AddopP) PLUS |
		  (AddopM) MINUS;
		  
/* MULOP */

Mulop ::= (MulopM) MUL |
		  (MulopD) DIV |
		  (MulopP) PERCENT;
		  